## Variables and Arithmetic Expressions ##


temp_conv.c:
    #include <stdio.h>

    /* Print Fahrenheit-Celsius table
       for fahr = 0, 20, ..., 300     */

    main() {
        int fahr, celsius;
        int lower, upper, step;

        lower = 0;
        upper = 300;
        step  = 20;

        fahr = lower;
        while (fahr <= upper) {
            celsius = 5 * (fahr-32) / 9;
            printf("%d\t%d\n", fahr, celsius);
            fahr = fahr + step;
        }
    }

What does this program do? Why don't we check that top part!  The text within
the /* ... */ informs us that this program prints the celsius conversion of some
fahrenheit temperature. This explanation is kept within a comment; comments are
useful for documenting good, and are generally good practice. Comments contained
within /* ... */ can be across multiple lines; comments can also be denoted by
//, which are single line comments.

In C, variables must be declared before they can be used. These declarations
inform the compiler about the properties of the variable, most notably the type.

> int fahr, celsius;
> int lower, upper, step;

In this instance, we are declaring five separate variables, all of which are
integers! Later:

> lower = 0;
> upper = 300;
> step  = 20;
> fahr  = lower;

We are setting the initial values of some of these variables.

There are several different types of variables; an alternative type to the int
is a float. A float is a floating point number, and they include a fractional
(decimal) part. In C, integer division truncates, so it may be more useful to
declare numbers you know might not always be integers as floats (in this case,
celsius). Conveniently, C will convert our ints to floats if the arithmetic we
do on those ints is WITH a float. With floats, our conversion line becomes:

> celsius = 5.0/9.0 * (fahr - 32.0)

which is perhaps a more clear way of expressing what we're doing!

Other types include:
    char   - character; a single byte
    short  - short integer
    long   - long integer
    double - double-precision floating-point

> while (fahr <= upper) { ... }

This is an instance of a while loop, a form of control flow that is used
frequently in not just C, but many programming languages. When the program
enters a while() loop, the condition within the () is checked. If it is TRUE,
then the content within the { ... } is performed, and then the condition is
retested. This continues until the condition in () is FALSE, and then the
program exits the while() loop and continues on through the function.

In our case, the while loop tests if fahr is less than or equal to upper. If it
is, then we convert that value to celius, and we print the fahrenheit and
celsius values. Finally, we add step to the value of fahr, and set fahr to this
new value. That way, when the loop repeats, we test against a new fahr value for
our condition - this is important, or else we would simply compute the same
fahrenheit to celsius conversion... forever!

> printf("%d\t%d\n", fahr, celsius);

Here we've introduced some new parts to our printf() function! The first
argument printf() takes determines the formatting of what is printed - each %
indicates the positions the rest of the arguments to printf() are printed. %d in
this case indicates that we should print an integer, \t means put a tab
character, printf another integer, and print a new line.  Those integer slots
are filled by the last two positions, fahr and celsius.

If we defined fahr and celius to be floats to get their decimal values instead
of truncating, we would use %f! Additionally, we can specify the width each of
the printed arguments is to be printed with; this mostly helps with formatting
the output. For instance,

    printf("%3d\t%6d\n", fahr, celsius);

would printf fahr as an integer, three characters wide, and celius as an integer
six characters wide! We could further modify this:

    printf("%3.0f\t%6.1f\n", fahr, celius);

So that, if if fahr and celsius were floats (instead of ints), fahr would be
printed three characters wide with no decimal places, and celsius would be
printed six characters wide with a single decimal place.

A nifty table:
    %d      print as decimal integer
    %6d     print as decimal integer, at least 6 characters wide
    %f      print as floating point
    %6f     print as floating point, at least 6 characters wide
    %.2f    print as floating point, 2 characters after decimal point
    %6.2f   print as floating point, at least 6 wide and 2 after decimal point

Finally, printf() also accepts other formats:
    %o octal
    %x hexadecimal
    %c character
    %s character string
    %% percent itself

---

## Exercises ##

1.3: Modify the temperature conversion program to print a heading above the
table. (temp_conv.c)

1.4: Write a program to print the corresponding Celsius to Fahrenheit table.
(cels_fahr.c)
